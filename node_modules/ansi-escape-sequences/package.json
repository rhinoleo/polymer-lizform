{
  "_args": [
    [
      {
        "raw": "ansi-escape-sequences@^4.0.0",
        "scope": null,
        "escapedName": "ansi-escape-sequences",
        "name": "ansi-escape-sequences",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "F:\\Webdesign\\Polymer\\polymer-lizform\\node_modules\\prpl-server"
    ]
  ],
  "_from": "ansi-escape-sequences@>=4.0.0 <5.0.0",
  "_id": "ansi-escape-sequences@4.0.0",
  "_inCache": true,
  "_location": "/ansi-escape-sequences",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ansi-escape-sequences-4.0.0.tgz_1502186062674_0.8640490393154323"
  },
  "_npmUser": {
    "name": "75lb",
    "email": "75pound@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ansi-escape-sequences@^4.0.0",
    "scope": null,
    "escapedName": "ansi-escape-sequences",
    "name": "ansi-escape-sequences",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/command-line-usage",
    "/prpl-server"
  ],
  "_resolved": "https://registry.npmjs.org/ansi-escape-sequences/-/ansi-escape-sequences-4.0.0.tgz",
  "_shasum": "e0ecb042958b71e42942d35c1fcf1d9b00a0f67e",
  "_shrinkwrap": null,
  "_spec": "ansi-escape-sequences@^4.0.0",
  "_where": "F:\\Webdesign\\Polymer\\polymer-lizform\\node_modules\\prpl-server",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/75lb/ansi-escape-sequences/issues"
  },
  "dependencies": {
    "array-back": "^2.0.0"
  },
  "description": "A simple library containing all known terminal ansi escape codes and sequences.",
  "devDependencies": {
    "jsdoc-to-markdown": "^3.0.0",
    "test-runner": "^0.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-v+0wW9Wezwsyb0uF4aBVCjmSqit3Ru7PZFziGF0o2KwTvN2zWfTi3BRLq9EkJFdg3eBbyERXGTntVpBxH1J68Q==",
    "shasum": "e0ecb042958b71e42942d35c1fcf1d9b00a0f67e",
    "tarball": "https://registry.npmjs.org/ansi-escape-sequences/-/ansi-escape-sequences-4.0.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "92708a93539c0fd678200512dad8123ac7b8af01",
  "homepage": "https://github.com/75lb/ansi-escape-sequences#readme",
  "keywords": [
    "ansi",
    "terminal",
    "colour",
    "color",
    "command line",
    "cursor"
  ],
  "license": "MIT",
  "main": "./lib/ansi-escape-sequences.js",
  "maintainers": [
    {
      "name": "75lb",
      "email": "75pound@gmail.com"
    }
  ],
  "name": "ansi-escape-sequences",
  "optionalDependencies": {},
  "readme": "[![view on npm](http://img.shields.io/npm/v/ansi-escape-sequences.svg)](https://www.npmjs.org/package/ansi-escape-sequences)\n[![npm module downloads](http://img.shields.io/npm/dt/ansi-escape-sequences.svg)](https://www.npmjs.org/package/ansi-escape-sequences)\n[![Build Status](https://travis-ci.org/75lb/ansi-escape-sequences.svg?branch=master)](https://travis-ci.org/75lb/ansi-escape-sequences)\n[![Dependency Status](https://david-dm.org/75lb/ansi-escape-sequences.svg)](https://david-dm.org/75lb/ansi-escape-sequences)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n# ansi-escape-sequences\nA simple library containing all known terminal [ansi escape codes and sequences](http://en.wikipedia.org/wiki/ANSI_escape_code). Useful for adding colour to your command-line output, or building a dynamic text user interface.\n\n## API Reference\n**Example**  \n```js\nconst ansi = require('ansi-escape-sequences')\n```\n\n* [ansi-escape-sequences](#module_ansi-escape-sequences)\n    * [.cursor](#module_ansi-escape-sequences.cursor)\n        * [.hide](#module_ansi-escape-sequences.cursor.hide)\n        * [.show](#module_ansi-escape-sequences.cursor.show)\n        * [.up([lines])](#module_ansi-escape-sequences.cursor.up) ⇒ <code>string</code>\n        * [.down([lines])](#module_ansi-escape-sequences.cursor.down) ⇒ <code>string</code>\n        * [.forward([lines])](#module_ansi-escape-sequences.cursor.forward) ⇒ <code>string</code>\n        * [.back([lines])](#module_ansi-escape-sequences.cursor.back) ⇒ <code>string</code>\n        * [.nextLine([lines])](#module_ansi-escape-sequences.cursor.nextLine) ⇒ <code>string</code>\n        * [.previousLine([lines])](#module_ansi-escape-sequences.cursor.previousLine) ⇒ <code>string</code>\n        * [.horizontalAbsolute(n)](#module_ansi-escape-sequences.cursor.horizontalAbsolute) ⇒ <code>string</code>\n        * [.position(n, m)](#module_ansi-escape-sequences.cursor.position) ⇒ <code>string</code>\n    * [.erase](#module_ansi-escape-sequences.erase)\n        * [.display(n)](#module_ansi-escape-sequences.erase.display) ⇒ <code>string</code>\n        * [.inLine(n)](#module_ansi-escape-sequences.erase.inLine) ⇒ <code>string</code>\n    * [.style](#module_ansi-escape-sequences.style) : <code>enum</code>\n    * [.styles(effectArray)](#module_ansi-escape-sequences.styles) ⇒ <code>string</code>\n    * [.format(str, [styleArray])](#module_ansi-escape-sequences.format) ⇒ <code>string</code>\n\n<a name=\"module_ansi-escape-sequences.cursor\"></a>\n\n## ansi.cursor\ncursor-related sequences\n\n**Kind**: static property of [<code>ansi-escape-sequences</code>](#module_ansi-escape-sequences)  \n\n* [.cursor](#module_ansi-escape-sequences.cursor)\n    * [.hide](#module_ansi-escape-sequences.cursor.hide)\n    * [.show](#module_ansi-escape-sequences.cursor.show)\n    * [.up([lines])](#module_ansi-escape-sequences.cursor.up) ⇒ <code>string</code>\n    * [.down([lines])](#module_ansi-escape-sequences.cursor.down) ⇒ <code>string</code>\n    * [.forward([lines])](#module_ansi-escape-sequences.cursor.forward) ⇒ <code>string</code>\n    * [.back([lines])](#module_ansi-escape-sequences.cursor.back) ⇒ <code>string</code>\n    * [.nextLine([lines])](#module_ansi-escape-sequences.cursor.nextLine) ⇒ <code>string</code>\n    * [.previousLine([lines])](#module_ansi-escape-sequences.cursor.previousLine) ⇒ <code>string</code>\n    * [.horizontalAbsolute(n)](#module_ansi-escape-sequences.cursor.horizontalAbsolute) ⇒ <code>string</code>\n    * [.position(n, m)](#module_ansi-escape-sequences.cursor.position) ⇒ <code>string</code>\n\n<a name=\"module_ansi-escape-sequences.cursor.hide\"></a>\n\n### cursor.hide\nHides the cursor\n\n**Kind**: static property of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n<a name=\"module_ansi-escape-sequences.cursor.show\"></a>\n\n### cursor.show\nShows the cursor\n\n**Kind**: static property of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n<a name=\"module_ansi-escape-sequences.cursor.up\"></a>\n\n### cursor.up([lines]) ⇒ <code>string</code>\nMoves the cursor `lines` cells up. If the cursor is already at the edge of the screen, this has no effect\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.down\"></a>\n\n### cursor.down([lines]) ⇒ <code>string</code>\nMoves the cursor `lines` cells down. If the cursor is already at the edge of the screen, this has no effect\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.forward\"></a>\n\n### cursor.forward([lines]) ⇒ <code>string</code>\nMoves the cursor `lines` cells forward. If the cursor is already at the edge of the screen, this has no effect\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.back\"></a>\n\n### cursor.back([lines]) ⇒ <code>string</code>\nMoves the cursor `lines` cells back. If the cursor is already at the edge of the screen, this has no effect\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.nextLine\"></a>\n\n### cursor.nextLine([lines]) ⇒ <code>string</code>\nMoves cursor to beginning of the line n lines down.\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.previousLine\"></a>\n\n### cursor.previousLine([lines]) ⇒ <code>string</code>\nMoves cursor to beginning of the line n lines up.\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Default |\n| --- | --- | --- |\n| [lines] | <code>number</code> | <code>1</code> | \n\n<a name=\"module_ansi-escape-sequences.cursor.horizontalAbsolute\"></a>\n\n### cursor.horizontalAbsolute(n) ⇒ <code>string</code>\nMoves the cursor to column n.\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| n | <code>number</code> | column number |\n\n<a name=\"module_ansi-escape-sequences.cursor.position\"></a>\n\n### cursor.position(n, m) ⇒ <code>string</code>\nMoves the cursor to row n, column m. The values are 1-based, and default to 1 (top left corner) if omitted.\n\n**Kind**: static method of [<code>cursor</code>](#module_ansi-escape-sequences.cursor)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| n | <code>number</code> | row number |\n| m | <code>number</code> | column number |\n\n<a name=\"module_ansi-escape-sequences.erase\"></a>\n\n## ansi.erase\nerase sequences\n\n**Kind**: static property of [<code>ansi-escape-sequences</code>](#module_ansi-escape-sequences)  \n\n* [.erase](#module_ansi-escape-sequences.erase)\n    * [.display(n)](#module_ansi-escape-sequences.erase.display) ⇒ <code>string</code>\n    * [.inLine(n)](#module_ansi-escape-sequences.erase.inLine) ⇒ <code>string</code>\n\n<a name=\"module_ansi-escape-sequences.erase.display\"></a>\n\n### erase.display(n) ⇒ <code>string</code>\nClears part of the screen. If n is 0 (or missing), clear from cursor to end of screen. If n is 1, clear from cursor to beginning of the screen. If n is 2, clear entire screen.\n\n**Kind**: static method of [<code>erase</code>](#module_ansi-escape-sequences.erase)  \n\n| Param | Type |\n| --- | --- |\n| n | <code>number</code> | \n\n<a name=\"module_ansi-escape-sequences.erase.inLine\"></a>\n\n### erase.inLine(n) ⇒ <code>string</code>\nErases part of the line. If n is zero (or missing), clear from cursor to the end of the line. If n is one, clear from cursor to beginning of the line. If n is two, clear entire line. Cursor position does not change.\n\n**Kind**: static method of [<code>erase</code>](#module_ansi-escape-sequences.erase)  \n\n| Param | Type |\n| --- | --- |\n| n | <code>number</code> | \n\n<a name=\"module_ansi-escape-sequences.style\"></a>\n\n## ansi.style : <code>enum</code>\nVarious formatting styles (aka Select Graphic Rendition codes).\n\n**Kind**: static enum of [<code>ansi-escape-sequences</code>](#module_ansi-escape-sequences)  \n**Properties**\n\n| Name | Type | Default |\n| --- | --- | --- |\n| reset | <code>string</code> | <code>&quot;\\u001b[0m&quot;</code> | \n| bold | <code>string</code> | <code>&quot;\\u001b[1m&quot;</code> | \n| italic | <code>string</code> | <code>&quot;\\u001b[3m&quot;</code> | \n| underline | <code>string</code> | <code>&quot;\\u001b[4m&quot;</code> | \n| fontDefault | <code>string</code> | <code>&quot;\\u001b[10m&quot;</code> | \n| font2 | <code>string</code> | <code>&quot;\\u001b[11m&quot;</code> | \n| font3 | <code>string</code> | <code>&quot;\\u001b[12m&quot;</code> | \n| font4 | <code>string</code> | <code>&quot;\\u001b[13m&quot;</code> | \n| font5 | <code>string</code> | <code>&quot;\\u001b[14m&quot;</code> | \n| font6 | <code>string</code> | <code>&quot;\\u001b[15m&quot;</code> | \n| imageNegative | <code>string</code> | <code>&quot;\\u001b[7m&quot;</code> | \n| imagePositive | <code>string</code> | <code>&quot;\\u001b[27m&quot;</code> | \n| black | <code>string</code> | <code>&quot;\\u001b[30m&quot;</code> | \n| red | <code>string</code> | <code>&quot;\\u001b[31m&quot;</code> | \n| green | <code>string</code> | <code>&quot;\\u001b[32m&quot;</code> | \n| yellow | <code>string</code> | <code>&quot;\\u001b[33m&quot;</code> | \n| blue | <code>string</code> | <code>&quot;\\u001b[34m&quot;</code> | \n| magenta | <code>string</code> | <code>&quot;\\u001b[35m&quot;</code> | \n| cyan | <code>string</code> | <code>&quot;\\u001b[36m&quot;</code> | \n| white | <code>string</code> | <code>&quot;\\u001b[37m&quot;</code> | \n| gray | <code>string</code> | <code>&quot;\\u001b[90m&quot;</code> |\n| &quot;bg-black&quot; | <code>string</code> | <code>&quot;\\u001b[40m&quot;</code> | \n| &quot;bg-red&quot; | <code>string</code> | <code>&quot;\\u001b[41m&quot;</code> | \n| &quot;bg-green&quot; | <code>string</code> | <code>&quot;\\u001b[42m&quot;</code> | \n| &quot;bg-yellow&quot; | <code>string</code> | <code>&quot;\\u001b[43m&quot;</code> | \n| &quot;bg-blue&quot; | <code>string</code> | <code>&quot;\\u001b[44m&quot;</code> | \n| &quot;bg-magenta&quot; | <code>string</code> | <code>&quot;\\u001b[45m&quot;</code> | \n| &quot;bg-cyan&quot; | <code>string</code> | <code>&quot;\\u001b[46m&quot;</code> | \n| &quot;bg-white&quot; | <code>string</code> | <code>&quot;\\u001b[47m&quot;</code> | \n| &quot;bg-gray&quot; | <code>string</code> | <code>&quot;\\u001b[100m&quot;</code> |\n\n**Example**  \n```js\nconsole.log(ansi.style.red + 'this is red' + ansi.style.reset)\n```\n<a name=\"module_ansi-escape-sequences.styles\"></a>\n\n## ansi.styles(effectArray) ⇒ <code>string</code>\nReturns an ansi sequence setting one or more effects\n\n**Kind**: static method of [<code>ansi-escape-sequences</code>](#module_ansi-escape-sequences)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| effectArray | <code>string</code> \\| <code>Array.&lt;string&gt;</code> | a style, or list or styles |\n\n**Example**  \n```js\n> ansi.styles('green')\n'\\u001b[32m'\n\n> ansi.styles([ 'green', 'underline' ])\n'\\u001b[32;4m'\n```\n<a name=\"module_ansi-escape-sequences.format\"></a>\n\n## ansi.format(str, [styleArray]) ⇒ <code>string</code>\nA convenience function, applying the provided styles to the input string and then resetting.\n\nInline styling can be applied using the syntax `[style-list]{text to format}`, where `style-list` is a space-separated list of styles from [ansi.style](#module_ansi-escape-sequences.style). For example `[bold white bg-red]{bold white text on a red background}`.\n\n**Kind**: static method of [<code>ansi-escape-sequences</code>](#module_ansi-escape-sequences)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| str | <code>string</code> | the string to format |\n| [styleArray] | <code>Array.&lt;string&gt;</code> | a list of styles to add to the input string |\n\n**Example**  \n```js\n> ansi.format('what?', 'green')\n'\\u001b[32mwhat?\\u001b[0m'\n\n> ansi.format('what?', ['green', 'bold'])\n'\\u001b[32;1mwhat?\\u001b[0m'\n\n> ansi.format('[green bold]{what?}')\n'\\u001b[32;1mwhat?\\u001b[0m'\n```\n\n* * *\n\n&copy; 2014-17 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/ansi-escape-sequences.git"
  },
  "scripts": {
    "docs": "jsdoc2md -d 1 -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "test": "test-runner test/*.js"
  },
  "version": "4.0.0"
}
